package com.bn.Sample12_3;
import java.io.IOException;
import java.io.InputStream;
import android.opengl.GLSurfaceView;
import android.opengl.GLUtils;
import android.opengl.GLES20;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import static com.bn.Sample12_3.Constant.*;

class MySurfaceView extends GLSurfaceView   
{
    private SceneRenderer mRenderer;//锟斤拷锟斤拷锟斤拷染锟斤拷    
    int textureFloor;//系统锟斤拷锟斤拷牟锟酵革拷锟斤拷匕锟斤拷锟斤拷锟絠d
    int textureFloorBTM;//系统锟斤拷锟斤拷陌锟酵革拷锟斤拷匕锟斤拷锟斤拷锟絠d
    int textureBallId;//系统锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟絠d
	 
	public MySurfaceView(Context context) {
        super(context);
        this.setEGLContextClientVersion(2); //锟斤拷锟斤拷使锟斤拷OPENGL ES2.0
        //this.setEGLConfigChooser(8, 8, 8, 8, 16, 8);
        mRenderer = new SceneRenderer();	//锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷染锟斤拷
        setRenderer(mRenderer);				//锟斤拷锟斤拷锟斤拷染锟斤拷		        
        setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);//锟斤拷锟斤拷锟斤拷染模式为锟斤拷锟斤拷锟斤拷染   
    }

	private class SceneRenderer implements GLSurfaceView.Renderer 
    {   
    	TextureRect texRect;//锟斤拷示锟截帮拷锟斤拷锟斤拷锟斤拷锟斤拷
    	BallTextureByVertex btbv;//锟斤拷锟节伙拷锟狡碉拷锟斤拷
    	BallForControl bfd;//锟斤拷锟节匡拷锟狡碉拷锟斤拷
    	
        public void onDrawFrame(GL10 gl) 
        { 
        	GLES20.glBlendFunc(sfactor, dfactor)
        	GLES20.glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha)
        	
        	
        	
        	//锟斤拷锟斤拷锟饺伙拷锟斤拷锟斤拷锟斤拷色锟斤拷锟斤拷
            GLES20.glClear( GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
             
            MatrixState.pushMatrix();
            MatrixState.translate(0, -2, 0);
            //锟斤拷锟侥ｏ拷寤猴拷锟�
            GLES20.glClear(GLES20.GL_STENCIL_BUFFER_BIT);
            //锟斤拷锟斤拷模锟斤拷锟斤拷锟�
            GLES20.glEnable(GLES20.GL_STENCIL_TEST);
            //锟斤拷锟斤拷模锟斤拷锟斤拷圆锟斤拷锟�
            GLES20.glStencilFunc(GLES20.GL_ALWAYS, 1, 1);
            //锟斤拷锟斤拷模锟斤拷锟斤拷院锟侥诧拷锟斤拷
            GLES20.glStencilOp(GLES20.GL_KEEP, GLES20.GL_KEEP, GLES20.GL_REPLACE);            
            //锟斤拷锟狡凤拷锟斤拷锟斤拷匕锟�
            texRect.drawSelf(textureFloor);  
            
            //锟斤拷锟斤拷模锟斤拷锟斤拷圆锟斤拷锟�
            GLES20.glStencilFunc(GLES20.GL_EQUAL,1, 1); 
            //锟斤拷锟斤拷模锟斤拷锟斤拷院锟侥诧拷锟斤拷
            GLES20.glStencilOp(GLES20.GL_KEEP, GLES20.GL_KEEP, GLES20.GL_KEEP);            
            //锟斤拷锟狡撅拷锟斤拷锟斤拷
            bfd.drawSelfMirror( textureBallId);
            //锟斤拷锟斤拷模锟斤拷锟斤拷锟�
            GLES20.glDisable(GLES20.GL_STENCIL_TEST);
            
            //锟斤拷锟狡帮拷透锟斤拷锟截帮拷
            //锟斤拷锟斤拷锟斤拷锟�
            GLES20.glEnable(GLES20.GL_BLEND);
            //锟斤拷锟矫伙拷锟斤拷锟斤拷锟�
            GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);
            texRect.drawSelf(textureFloorBTM);    
            //锟截闭伙拷锟�
            GLES20.glDisable(GLES20.GL_BLEND);  
            //锟斤拷锟斤拷实锟斤拷锟斤拷锟斤拷 
            bfd.drawSelf(textureBallId);  
            MatrixState.popMatrix();   
        }  

        public void onSurfaceChanged(GL10 gl, int width, int height) 
        {
            //锟斤拷锟斤拷锟接达拷锟斤拷小锟斤拷位锟斤拷 
        	GLES20.glViewport(0, 0, width, height); 
        	//锟斤拷锟斤拷GLSurfaceView锟侥匡拷弑锟�
            float ratio = (float) width / height;
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟酵革拷锟酵队帮拷锟斤拷锟�
            MatrixState.setProjectFrustum(-ratio, ratio, -1, 1, 3, 100);
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟�9锟斤拷锟斤拷位锟矫撅拷锟斤拷
            MatrixState.setCamera(0.0f,8.0f,8.0f,0,0f,0,0,1,0);
        }

        public void onSurfaceCreated(GL10 gl, EGLConfig config) {
            //锟斤拷锟斤拷锟斤拷幕锟斤拷锟斤拷色RGBA
            GLES20.glClearColor(0.0f,0.0f,0.0f,1.0f);  
            //锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷味远锟斤拷锟� 
            texRect=new TextureRect(MySurfaceView.this,4,2.568f);  
            //锟斤拷锟斤拷锟斤拷锟节伙拷锟狡碉拷锟斤拷锟斤拷锟斤拷锟�
            btbv=new BallTextureByVertex(MySurfaceView.this,BALL_SCALE);
            //锟斤拷锟斤拷锟斤拷锟节匡拷锟狡碉拷锟斤拷锟斤拷锟斤拷锟�
            bfd=new BallForControl(btbv,3f);
            //锟截憋拷锟斤拷燃锟斤拷
            GLES20.glDisable(GLES20.GL_DEPTH_TEST);
            //锟斤拷始锟斤拷锟斤拷锟斤拷
            textureFloor=initTexture(R.drawable.mdb);
            textureFloorBTM=initTexture(R.drawable.mdbtm);
            textureBallId=initTexture(R.drawable.basketball);            
            //锟津开憋拷锟斤拷锟斤拷锟�   
            GLES20.glEnable(GLES20.GL_CULL_FACE);
            //锟斤拷始锟斤拷锟戒换锟斤拷锟斤拷
            MatrixState.setInitStack();
        }
    }
	
	public int initTexture(int drawableId)//textureId
	{
		//锟斤拷锟斤拷锟斤拷锟斤拷ID
		int[] textures = new int[1];
		GLES20.glGenTextures
		(
				1,          //锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷id锟斤拷锟斤拷锟斤拷
				textures,   //锟斤拷锟斤拷id锟斤拷锟斤拷锟斤拷
				0           //偏锟斤拷锟斤拷
		);    
		int textureId=textures[0];    
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);
        
        //通锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷图片===============begin===================
        InputStream is = this.getResources().openRawResource(drawableId);
        Bitmap bitmapTmp;
        try 
        {
        	bitmapTmp = BitmapFactory.decodeStream(is);
        } 
        finally 
        {
            try 
            {
                is.close();
            } 
            catch(IOException e) 
            {
                e.printStackTrace();
            }
        }
        //通锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷图片===============end=====================  
        
        //实锟绞硷拷锟斤拷锟斤拷锟斤拷
        GLUtils.texImage2D
        (
        		GLES20.GL_TEXTURE_2D,   //锟斤拷锟斤拷锟斤拷锟酵ｏ拷锟斤拷OpenGL ES锟叫憋拷锟斤拷为GLES20.GL_TEXTURE_2D
        		0, 					  //锟斤拷锟斤拷牟锟轿ｏ拷0锟斤拷示锟斤拷锟斤拷图锟斤拷悖拷锟斤拷锟斤拷锟斤拷为直锟斤拷锟斤拷图
        		bitmapTmp, 			  //锟斤拷锟斤拷图锟斤拷
        		0					  //锟斤拷锟斤拷呖锟竭达拷
        );
        bitmapTmp.recycle(); 		  //锟斤拷锟斤拷锟斤拷爻晒锟斤拷锟斤拷头锟酵计�
        return textureId;
	}
}
