package com.bn.Sample12_1;
import android.opengl.GLSurfaceView;
import android.opengl.GLES20;
import android.view.MotionEvent;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;
import android.content.Context;

class MySurfaceView extends GLSurfaceView 
{
	private final float TOUCH_SCALE_FACTOR = 180.0f/320;//锟角讹拷锟斤拷锟脚憋拷锟斤拷
    private SceneRenderer mRenderer;//锟斤拷锟斤拷锟斤拷染锟斤拷    
    
    private float mPreviousY;//锟较次的达拷锟斤拷位锟斤拷Y锟斤拷锟斤拷
    private float mPreviousX;//锟较次的达拷锟斤拷位锟斤拷X锟斤拷锟斤拷
    //GLSurfaceView锟侥匡拷弑锟�
    float ratio;
	public MySurfaceView(Context context) {
        super(context);
        this.setEGLContextClientVersion(2); //锟斤拷锟斤拷使锟斤拷OPENGL ES2.0
        mRenderer = new SceneRenderer();	//锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷染锟斤拷
        setRenderer(mRenderer);				//锟斤拷锟斤拷锟斤拷染锟斤拷		        
        setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);//锟斤拷锟斤拷锟斤拷染模式为锟斤拷锟斤拷锟斤拷染   
    }
	
	//锟斤拷锟斤拷锟铰硷拷锟截碉拷锟斤拷锟斤拷
    @Override 
    public boolean onTouchEvent(MotionEvent e) 
    {
        float y = e.getY();
        float x = e.getX();
        switch (e.getAction()) {
        case MotionEvent.ACTION_MOVE:
            float dy = y - mPreviousY;//锟斤拷锟姐触锟截憋拷Y位锟斤拷
            float dx = x - mPreviousX;//锟斤拷锟姐触锟截憋拷X位锟斤拷
            mRenderer.yAngle += dx * TOUCH_SCALE_FACTOR;//锟斤拷锟斤拷锟斤拷x锟斤拷锟斤拷转锟角讹拷
            mRenderer.zAngle+= dy * TOUCH_SCALE_FACTOR;//锟斤拷锟斤拷锟斤拷z锟斤拷锟斤拷转锟角讹拷
            requestRender();//锟截绘画锟斤拷
        }
        mPreviousY = y;//锟斤拷录锟斤拷锟截憋拷位锟斤拷
        mPreviousX = x;//锟斤拷录锟斤拷锟截憋拷位锟斤拷
        return true;
    }

	private class SceneRenderer implements GLSurfaceView.Renderer 
    {  
		float yAngle;//锟斤拷Y锟斤拷锟斤拷转锟侥角讹拷
    	float zAngle; //锟斤拷Z锟斤拷锟斤拷转锟侥角讹拷
    	//锟斤拷指锟斤拷锟斤拷obj锟侥硷拷锟叫硷拷锟截讹拷锟斤拷
		LoadedObjectVertexNormal lovo;
    	
        public void onDrawFrame(GL10 gl) 
        {
            //锟斤拷锟斤拷锟斤拷幕锟斤拷锟斤拷色RGBA
            GLES20.glClearColor(0.0f,0.0f,0.0f,1.0f);   
        	//锟斤拷锟斤拷锟饺伙拷锟斤拷锟斤拷锟斤拷色锟斤拷锟斤拷
            GLES20.glClear( GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟酵革拷锟酵队帮拷锟斤拷锟�
            MatrixState.setProjectFrustum(-ratio, ratio, -1, 1, 2, 100);
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟�9锟斤拷锟斤拷位锟矫撅拷锟斤拷
            MatrixState.setCamera(0,0,0,0f,0f,-1f,0f,1.0f,0.0f);
            //锟斤拷锟斤拷系锟斤拷远
            MatrixState.pushMatrix();
            MatrixState.translate(0, -2f, -25f);   //ch.obj
            //锟斤拷Y锟结、Z锟斤拷锟斤拷转
            MatrixState.rotate(yAngle, 0, 1, 0);
            MatrixState.rotate(zAngle, 1, 0, 0);
            //锟斤拷锟斤拷锟截碉拷锟斤拷锟藉部位锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟�
            if(lovo!=null)
            {
            	lovo.drawSelf();
            }   
            
            //锟斤拷锟狡革拷锟接角筹拷锟斤拷=============================================begin=========================             
            //锟斤拷锟矫硷拷锟矫诧拷锟斤拷
        	GLES20.glEnable(GL10.GL_SCISSOR_TEST);    
        	//锟斤拷锟斤拷锟斤拷锟斤拷
        	GLES20.glScissor(0,0,1000,600);  
        	//锟斤拷锟斤拷锟斤拷幕锟斤拷锟斤拷色RGBA
            GLES20.glClearColor(0.7f,0.7f,0.7f,1.0f);  
            //锟斤拷锟斤拷锟缴拷锟斤拷锟斤拷锟斤拷锟饺伙拷锟斤拷
            GLES20.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);            
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟酵革拷锟酵队帮拷锟斤拷锟�
            MatrixState.setProjectFrustum(-0.62f*ratio, 1.38f*ratio, -1.55f, 0.45f, 2, 100);
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟�9锟斤拷锟斤拷位锟矫撅拷锟斤拷
            MatrixState.setCamera(0,0,0,0f,0f,-1f,0f,1.0f,0.0f);
//            MatrixState.setCamera(0, 50f, -30f,0, -2f, -25f,0f,0.0f,-1.0f);
			if (lovo != null) {
				lovo.drawSelf();
			} 
            //锟斤拷锟矫硷拷锟矫诧拷锟斤拷
        	GLES20.glDisable(GL10.GL_SCISSOR_TEST);  
        	//锟斤拷锟狡革拷锟接角筹拷锟斤拷=============================================end=========================
            MatrixState.popMatrix();
        }  

        public void onSurfaceChanged(GL10 gl, int width, int height) {
            //锟斤拷锟斤拷锟接达拷锟斤拷小锟斤拷位锟斤拷 
        	GLES20.glViewport(0, 0, width, height); 
        	//锟斤拷锟斤拷GLSurfaceView锟侥匡拷弑锟�
            ratio = (float) width / height;
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟酵革拷锟酵队帮拷锟斤拷锟�
            MatrixState.setProjectFrustum(-ratio, ratio, -1, 1, 2, 100);
            //锟斤拷锟矫此凤拷锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷锟�9锟斤拷锟斤拷位锟矫撅拷锟斤拷
            MatrixState.setCamera(0,0,0,0f,0f,-1f,0f,1.0f,0.0f);
        }

        public void onSurfaceCreated(GL10 gl, EGLConfig config) {
            //锟斤拷锟斤拷燃锟斤拷
            GLES20.glEnable(GLES20.GL_DEPTH_TEST);
            //锟津开憋拷锟斤拷锟斤拷锟�   
            GLES20.glEnable(GLES20.GL_CULL_FACE);
            //锟斤拷始锟斤拷锟戒换锟斤拷锟斤拷
            MatrixState.setInitStack();
            //锟斤拷始锟斤拷锟斤拷源位锟斤拷
            MatrixState.setLightLocation(40, 10, 20);
            //锟斤拷锟斤拷要锟斤拷锟狡碉拷锟斤拷锟斤拷
            lovo=LoadUtil.loadFromFileVertexOnly("ch.obj", MySurfaceView.this.getResources(),MySurfaceView.this);
        }
    }
}
