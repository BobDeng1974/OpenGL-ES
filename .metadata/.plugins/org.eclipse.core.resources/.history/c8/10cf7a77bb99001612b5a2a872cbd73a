package com.example.opengles_rectangle2;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;
import android.view.MotionEvent;

public class RectangleView extends GLSurfaceView{

	MyRender mMyRender;
	public RectangleView(Context context) {
		super(context);
		setEGLContextClientVersion(2);
		mMyRender = new MyRender();
		setRenderer(mMyRender);
	}
	
	class MyRender implements GLSurfaceView.Renderer {
		private Rectangle[] mRectangles;
		private float mPreviousY;
		private float mPreviousX;
		
		@Override
		public void onSurfaceCreated(GL10 gl, EGLConfig config) {
			GLES20.glClearColor(0.5f, 0.5f, 0.5f, 1);
			mRectangles = new Rectangle[5];
			for (int i = 0; i < mRectangles.length; i++) {
				mRectangles[i] = new Rectangle(i);  
			}
			GLES20.glEnable(GLES20.GL_DEPTH_TEST);
		}

		@Override
		public void onSurfaceChanged(GL10 gl, int width, int height) {
			GLES20.glViewport(0, 0, width, height);
			Matrix.perspectiveM(mProjectionMatrix, 0, 45, (float)width/height, 2, 10);
			Matrix.setLookAtM(mViewMatrix, 0, 0, 0, 8,  0, 0, 0, 0, 1, 0);
			/*
			float ratio= width > height ? (float)width / height : (float)height / width;
			if (width > height) {
				// 横屏 
				Matrix.orthoM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 0, 5);
			} else {
				Matrix.orthoM(mProjectionMatrix, 0, -1, 1, -ratio, ratio, 0, 5);
			}
			*/
		}
		
		public boolean onTouchEvent(MotionEvent e) {
	        float y = e.getY();
	        float x = e.getX();
	        switch (e.getAction()) {
	        case MotionEvent.ACTION_MOVE:
	            float dy = y - mPreviousY;//���㴥�ر�Yλ��
	            float dx = x - mPreviousX;//���㴥�ر�Xλ��
	            mRenderer.yAngle += dx * TOUCH_SCALE_FACTOR;//������y����ת�Ƕ�
	            mRenderer.xAngle+= dy * TOUCH_SCALE_FACTOR;//������x����ת�Ƕ�
	            requestRender();//�ػ滭��
	        }
	        mPreviousY = y;
	        mPreviousX = x;
	        return true;
	    }
		
		

	    private final float[] mProjectionMatrix = new float[16];
	    private final float[] mViewMatrix = new float[16];
	    private final float[] mViewProjectionMatrix = new float[16];
		@Override
		public void onDrawFrame(GL10 gl) {
            GLES20.glClear( GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
            
            for (Rectangle rectangle : mRectangles) {
            	Matrix.multiplyMM(mViewProjectionMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);
                rectangle.draw(mViewProjectionMatrix);
            }
		}
	}
	
}